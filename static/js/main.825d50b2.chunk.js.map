{"version":3,"sources":["components/usersList/UsersList.js","components/searchField/SearchField.js","components/userDetails/UserDetails.js","components/modal/Modal.js","containers/users/Users.js","api/useFetchUsers.js","api/endPoints.js","components/appHeader/AppHeader.js","App.js","serviceWorker.js","index.js"],"names":["UsersList","users","onItemClick","data-testid","className","TransitionGroup","map","user","i","CSSTransition","key","name","timeout","classNames","title","id","onClick","SearchField","onChange","style","marginTop","marginBottom","placeholder","UsersDetails","username","email","website","href","Modal","children","onClose","Users","useState","filteredUsers","setFilteredUsers","existingusers","setUsers","loading","setLoading","useEffect","console","log","a","fetch","response","json","data","slice","setTimeout","getData","useFetchUsers","userDetails","setUserDetails","toggleUserDetails","e","preventDefault","target","filter","item","searchValue","value","toLowerCase","filterResult","includes","length","AppHeader","src","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.825d50b2.chunk.js","sourcesContent":["import React from 'react'\nimport './users-list.css'\nimport { CSSTransition, TransitionGroup} from 'react-transition-group'\n\n\nexport default function UsersList ({users, onItemClick}) {\n    return (\n        <div data-testid='users-list-test-id' className='users-list'>\n            <ul className='green-blue-list'>\n                <TransitionGroup >\n                    {users.map((user, i) => <CSSTransition\n                    key={user.name}\n                    timeout={500}\n                    classNames=\"item\">\n                        <li className='green-blue-list-item user-list-item'\n                        title={user.name}\n                        id={user.id}\n                        onClick={onItemClick}>\n                            {user.name}\n                            </li>\n                            </CSSTransition>)}\n                </TransitionGroup>\n            </ul>\n        </div>\n    )\n}","import React from 'react'\n/**\n * inline style here, all we needed is one property \n */\n\nexport default function SearchField ({onChange}) {\nreturn (\n<div data-testid='search-field-test-id' style={{marginTop: 16, marginBottom: 16}}>\n    <input className='input-primary input-md' placeholder='Search by name' onChange={onChange}/>\n</div>\n)\n}","import React from 'react'\nimport './user-details.css'\n\n\nexport default function UsersDetails({user}) {\n    const { name, username, email, website} = user\n    return (\n        <div data-testid='user-details-test-id' className='user-details'>\n            <h5>User Details</h5>\n            <ul className='green-blue-list'>\n                <li className='green-blue-list-item'><span className='listing'>Name:</span> {name}</li>\n                <li className='green-blue-list-item'><span className='listing'>Username:</span> {username}</li>\n                <li className='green-blue-list-item'><span className='listing'>Email:</span> {email}</li>\n                <li className='green-blue-list-item'><span className='listing'>\n                    Website:</span><a href={`https://www.${website}`}>{website}</a\n                ></li>\n            </ul>\n        </div>\n    )\n}","import React from 'react'\nimport './modal.css'\n\n\nexport default function Modal({children, onClose}) {\n    return (\n        <div data-testid='modal-test-it' className='user-details-modal'>\n            <div className='modal-content'>\n                {children}\n           <button className='btn-outline btn-md' onClick={onClose}>Close</button>\n            </div>\n        </div>\n    )\n}","import React, { useState } from 'react'\nimport UsersList from '../../components/usersList'\nimport './users.css'\nimport SearchField from '../../components/searchField'\nimport useFetchUsers from '../../api/useFetchUsers'\nimport UserDetails from '../../components/userDetails'\nimport Modal from '../../components/modal/Modal'\n\n\nexport default function Users() {\n    const [filteredUsers, setFilteredUsers] = useState(null)\n    const [users, loading] = useFetchUsers(filteredUsers)\n    const [ userDetails, setUserDetails]= useState(null)\n\n\n    const handleOnSearch = (e) => {\n        // don't try to search while loading.\n        if(loading) {\n            return\n        }\n        const {target} = e\n        const searchValue = target.value.toLowerCase()\n        const filterResult = users.filter(user => user.name.toLowerCase().includes(searchValue))\n        setFilteredUsers(filterResult)\n    }\n\n    const toggleUserDetails = (e) => {\n        // if the event is false, toggle modal off\n        if(!e) {\n            setUserDetails(null)\n            return\n        }\n        e.preventDefault()\n        const {title} = e.target\n        const user = users.filter(item => item.name === title)[0]\n        setUserDetails(user)\n    }\n\n    return (\n        <div>\n            <div data-testid='users-test-id' className='users-container shadow-01dp'>\n            <h5>Search</h5>\n            <SearchField onChange={handleOnSearch}/> <br/>\n            <h5>Results</h5>\n            {filteredUsers?.length === 0 && <span className=\"highlighted\">No results</span>}\n            {loading ? <p>Loading ...</p> : <UsersList onItemClick={toggleUserDetails} users={filteredUsers || users}/>}\n        </div>\n            {userDetails && <Modal onClose={() => toggleUserDetails(false)}>\n                <UserDetails user={userDetails}/>\n                </Modal>}\n        </div>\n    )\n}","import { useState, useEffect } from 'react'\nimport {USERS_ENDPOINT} from './endPoints.js'\n\n/**\n * custom hook to fetch users\n * it's a shared resource, creating custom hooks can help to reuse it in many components\n */\n\nexport default function useFetchUsers(existingusers) {\n    const [users, setUsers] = useState([])\n    const [loading, setLoading] = useState([])\n\n    useEffect(() => {\n        console.log('fetch data hook')\n        setUsers([])\n        const getData = async () => {\n            const response = await fetch(USERS_ENDPOINT)\n            const data = await response.json()\n            setUsers([...data].slice(0,5))\n            setTimeout(setLoading, 300, false) //slow it down to see (Loading ...)\n        }\n         getData()\n\n         return () => setUsers([])\n    },[])\n\n    return [users, loading]\n}","/**\n * in this case we have just one endpoint but in real-life, must likely we would have multi endpoints,\n * so I don' use export default\n */\n\nexport const USERS_ENDPOINT = 'https://jsonplaceholder.typicode.com/users'","import React from 'react'\nimport './app-header.css'\n\n\nexport default function AppHeader(){\n    return <div className=\"header-wrapper\" data-testid='app-header-test-id'>\n        <img src=\"//d9hhrg4mnvzow.cloudfront.net/versicherung.dentolo.de/rundumschutz-premium-organic/4728e039-logo-dentolo-small-113x32.svg\" alt=\"dentolo\"/>\n        <br/><p>Users platform</p>\n        </div>\n}","import React from 'react'\nimport Users from './containers/users'\nimport AppHeader from './components/appHeader'\nimport './app.css'\n\n\nfunction App() {\n    return <div className = \"App\">\n        <AppHeader />\n        <div className='search-container'>\n            <h2 className=\"search-container__title\">Find a user by name</h2>\n            <Users />\n        </div>\n    </div>\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}